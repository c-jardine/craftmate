// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Material {
    id               String             @id @default(uuid())
    name             String
    url              String?
    sku              String?
    cost             Decimal?
    stockLevel       Decimal?
    stockUnitType    String?
    minStockLevel    Decimal?
    notes            String?
    vendor           String?
    categories       MaterialCategory[]
    productMaterials ProductMaterial[]
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt

    createdBy   User   @relation("createdBy", fields: [createdById], references: [id])
    createdById String
    updatedBy   User   @relation("updatedBy", fields: [updatedById], references: [id])
    updatedById String
}

model Product {
    id            String            @id @default(uuid())
    name          String
    sku           String
    stockLevel    Decimal
    stockUnitType String
    minStockLevel Decimal
    materials     ProductMaterial[]
    notes         String
    categories    ProductCategory[]
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}

model ProductMaterial {
    id String @id @default(uuid())

    product    Product  @relation(fields: [productId], references: [id])
    productId  String
    material   Material @relation(fields: [materialId], references: [id])
    materialId String
}

model Category {
    id                 String             @id @default(uuid())
    name               String
    materialCategories MaterialCategory[]
    productCategories  ProductCategory[]
}

model MaterialCategory {
    materialId String
    material   Material @relation(fields: [materialId], references: [id])
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    @@id([materialId, categoryId])
}

model ProductCategory {
    productId  String
    product    Product  @relation(fields: [productId], references: [id])
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])

    @@id([productId, categoryId])
}

model UserSettings {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    @@id([userId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String        @id @default(cuid())
    name             String?
    email            String?       @unique
    emailVerified    DateTime?
    image            String?
    userSettings     UserSettings?
    accounts         Account[]
    sessions         Session[]
    materialsCreated Material[]    @relation("createdBy")
    materialsUpdated Material[]    @relation("updatedBy")
    products         Product[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
