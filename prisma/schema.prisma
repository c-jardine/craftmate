// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Material {
    id                 String                      @id @default(uuid())
    name               String
    url                String?
    sku                String?                     @unique
    cost               Decimal?
    quantity           Decimal
    quantityUnit       QuantityUnit                @relation(fields: [quantityUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    quantityUnitId     String
    minQuantity        Decimal?
    vendor             Vendor?                     @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    vendorId           String?
    categories         MaterialCategory[]
    notes              String?
    quantityUpdateLogs MaterialQuantityUpdateLog[]
    productMaterials   ProductMaterial[]
    recipeMaterials    RecipeMaterial[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String
    updatedBy   User     @relation("updatedBy", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    updatedById String
}

model QuantityUnit {
    id              String           @id @default(uuid())
    name            String           @unique
    group           String
    singular        String
    plural          String
    abbrevSingular  String
    abbrevPlural    String
    materials       Material[]
    recipes         Recipe[]
    recipeMaterials RecipeMaterial[]

    @@map("QuantityUnit")
}

model MaterialQuantityUpdateLog {
    id               String                     @id @default(uuid())
    type             MaterialQuantityUpdateType @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    typeId           String
    originalQuantity Decimal
    adjustedQuantity Decimal
    notes            String?
    material         Material                   @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialId       String

    createdAt   DateTime @default(now())
    createdBy   User     @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String
}

model MaterialQuantityUpdateType {
    id        String                       @id @default(uuid())
    type      String                       @unique
    action    MaterialQuantityUpdateAction
    color     String
    materials MaterialQuantityUpdateLog[]
}

enum MaterialQuantityUpdateAction {
    INCREASE
    SET
    DECREASE
}

model Product {
    id           String            @id @default(uuid())
    name         String
    sku          String
    quantity     Decimal
    quantityUnit String
    minQuantity  Decimal
    materials    ProductMaterial[]
    notes        String
    categories   ProductCategory[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String
}

model ProductMaterial {
    id         String   @id @default(uuid())
    product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    productId  String
    material   Material @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialId String
}

model MaterialCategory {
    id        String     @id @default(uuid())
    name      String     @unique
    materials Material[]
}

model ProductCategory {
    id       String    @id @default(uuid())
    name     String    @unique
    products Product[]
}

model RecipeCategory {
    id      String   @id @default(uuid())
    name    String   @unique
    recipes Recipe[]
}

model Vendor {
    id        String     @id @default(uuid())
    name      String     @unique
    url       String?
    materials Material[]
}

model Recipe {
    id              String           @id @default(uuid())
    name            String           @unique
    sku             String?
    upc             String?
    retailPrice     Decimal?
    wholesalePrice  Decimal?
    retailMargin    Decimal?
    wholesaleMargin Decimal?
    materials       RecipeMaterial[]
    batchSize       Decimal
    batchSizeUnit   QuantityUnit     @relation(fields: [batchSizeUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    batchSizeUnitId String
    costPerUnit     Decimal
    categories      RecipeCategory[]
    notes           String?

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation("createdBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    createdById String
    updatedBy   User     @relation("updatedBy", fields: [updatedById], references: [id], onDelete: Cascade, onUpdate: Cascade)
    updatedById String
}

model RecipeMaterial {
    id             String       @id @default(uuid())
    material       Material     @relation(fields: [materialId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    materialId     String
    quantity       Decimal
    quantityUnit   QuantityUnit @relation(fields: [quantityUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    quantityUnitId String
    recipe         Recipe       @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    recipeId       String
}

model UserSettings {
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@id([userId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String                      @id @default(cuid())
    name                    String?
    email                   String?                     @unique
    emailVerified           DateTime?
    image                   String?
    userSettings            UserSettings?
    accounts                Account[]
    sessions                Session[]
    materialsCreated        Material[]                  @relation("createdBy")
    materialsUpdated        Material[]                  @relation("updatedBy")
    recipesCreated          Recipe[]                    @relation("createdBy")
    recipesUpdated          Recipe[]                    @relation("updatedBy")
    products                Product[]
    materialQuantityUpdates MaterialQuantityUpdateLog[] @relation("createdBy")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
